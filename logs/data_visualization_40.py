# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-16 22:08:14

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # The data_raw is expected to be a DataFrame with columns including 'genres' and 'mean'
    df = data_raw.copy()

    # Since the data has one mean value per genre, a box plot normally requires multiple data points per category.
    # To simulate a distribution for each genre's mean budget, we will create a normal distribution around mean with std
    # Using std as scale and mean as center, generate synthetic samples to visualize distribution.
    # Number of samples per genre will be proportional to count but capped to avoid too large data.

    simulated_data = []
    for _, row in df.iterrows():
        genre = row['genres']
        mean_val = row['mean']
        std_val = row['std']
        count_val = row['count']

        # If std is 0 or very low, simulate a small spread around mean
        if std_val <= 0 or np.isnan(std_val):
            std_val = mean_val * 0.1 if mean_val > 0 else 1e6

        # Limit number of samples for performance (max 200 samples per genre)
        n_samples = min(count_val, 200)

        # Generate synthetic data points for box plot
        samples = np.random.normal(loc=mean_val, scale=std_val, size=n_samples)
        # Avoid negative budgets by clipping at zero
        samples = np.clip(samples, a_min=0, a_max=None)

        for val in samples:
            simulated_data.append({'genres': genre, 'mean': val})

    sim_df = pd.DataFrame(simulated_data)

    # Create box plot using Plotly
    fig = go.Figure()

    # Plotly box plot with x=genres and y=mean budget distribution
    fig = go.Figure()

    for genre in sim_df['genres'].unique():
        fig.add_trace(go.Box(
            y=sim_df[sim_df['genres'] == genre]['mean'],
            name=genre,
            boxpoints='outliers',
            marker_color='blue'
        ))

    fig.update_layout(
        title="Distribution of Mean Budget Across Different Genres",
        xaxis_title="Genres",
        yaxis_title="Mean Budget",
        xaxis=dict(tickangle=-45),
        template="plotly_white",
        height=600,
        width=900
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict