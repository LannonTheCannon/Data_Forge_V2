# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-28 16:47:13

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Copy data for safe operations
    df = data_raw.copy()

    # Treat Quantity as categorical by converting to string for x axis
    df['Quantity_cat'] = df['Quantity'].astype(str)

    # To color points by Customer Location, we create one scatter trace per location:
    scatter_traces = []
    for location in df['Customer Location'].unique():
        loc_df = df[df['Customer Location'] == location]
        scatter_traces.append(
            go.Scatter(
                x=loc_df['Quantity_cat'],
                y=loc_df['Total Sales'],
                mode='markers',
                name=location,
                marker=dict(
                    size=8,
                    opacity=0.8,
                    line=dict(width=0.5, color='DarkSlateGrey')
                ),
                hovertemplate=
                'Quantity: %{x}<br>Total Sales: %{y}<br>Location: ' + location + '<extra></extra>',
            )
        )

    # Regression line:
    # Quantity is categorical but numeric originally 1-5, so we use numeric values for regression
    x_numeric = df['Quantity'].values
    y_numeric = df['Total Sales'].values

    # Fit linear regression line y = m*x + c
    coeffs = np.polyfit(x_numeric, y_numeric, deg=1)
    m, c = coeffs

    # Create x values for line covering all quantity categories 1 through 5
    x_line_numeric = np.linspace(1, 5, 100)
    y_line = m * x_line_numeric + c

    # Create regression line trace
    regression_line = go.Scatter(
        x=x_line_numeric,
        y=y_line,
        mode='lines',
        name='Best-Fit Line',
        line=dict(color='black', width=3),
        hoverinfo='skip'
    )

    # Build figure
    fig = go.Figure()

    # Add scatter traces by location
    for trace in scatter_traces:
        fig.add_trace(trace)

    # Add regression line trace
    fig.add_trace(regression_line)

    # Because regression line x is numeric and xaxis is categorical, 
    # we need to map numeric x_line_numeric to categorical positions.
    # The xaxis is categorical with categories '1','2','3','4','5' in order.
    # Plotly places categorical x-values at integer positions starting at 0.
    # So categories '1','2','3','4','5' correspond to x positions 0,1,2,3,4.
    # We transform regression line x values from numeric 1-5 to these positions by subtracting 1.

    fig.data[-1].x = x_line_numeric - 1  # shift numeric x to zero-based index to align with categories

    # Update layout
    fig.update_layout(
        title="Total Sales vs. Quantity per Transaction Colored by Customer Location with Best-Fit Line",
        xaxis=dict(
            title="Quantity per Transaction",
            type='linear',  # linear to align line properly
            tickmode='array',
            tickvals=[0, 1, 2, 3, 4],
            ticktext=[str(i) for i in sorted(df['Quantity'].unique())],
        ),
        yaxis=dict(
            title="Total Sales",
        ),
        legend_title_text='Customer Location',
        template='plotly_white',
        hovermode='closest'
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict