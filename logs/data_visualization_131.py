# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-26 16:35:13

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio
    from sklearn.linear_model import LinearRegression






    # Use the raw dataframe as is (assumed cleaned and complete)
    df = data_raw.copy()

    # Separate outliers and normal points
    df_outliers = df[df['outlier'] == True]
    df_normal = df[df['outlier'] == False]

    # Prepare data for regression: Use log-log scale to fit linear model (Kepler's law suggests power law)
    X = df_normal['log_Orbital_Period'].values.reshape(-1, 1)
    y = df_normal['log_Semi_Major_Axis'].values

    # Fit linear regression on log-log data
    model = LinearRegression()
    model.fit(X, y)

    # Create regression line points (log scale)
    x_fit_log = np.linspace(df['log_Orbital_Period'].min(), df['log_Orbital_Period'].max(), 500)
    y_fit_log = model.predict(x_fit_log.reshape(-1, 1))

    # Convert regression line back to original scale
    x_fit = np.power(10, x_fit_log)
    y_fit = np.power(10, y_fit_log)

    # Create scatter traces
    trace_normal = go.Scatter(
        x=df_normal['Orbital Period Days'],
        y=df_normal['Orbit Semi-Major Axis'],
        mode='markers',
        name='Normal Points',
        marker=dict(color='blue', size=6, opacity=0.7),
        hovertemplate=(
            "<b>%{customdata[0]}</b><br>" +
            "Orbital Period (Days): %{x}<br>" +
            "Orbit Semi-Major Axis: %{y}<br>" +
            "Outlier: %{customdata[1]}"
        ),
        customdata=np.stack((df_normal['Planet Name'], df_normal['outlier']), axis=-1)
    )

    trace_outliers = go.Scatter(
        x=df_outliers['Orbital Period Days'],
        y=df_outliers['Orbit Semi-Major Axis'],
        mode='markers',
        name='Outliers',
        marker=dict(color='red', size=9, symbol='x'),
        hovertemplate=(
            "<b>%{customdata[0]}</b><br>" +
            "Orbital Period (Days): %{x}<br>" +
            "Orbit Semi-Major Axis: %{y}<br>" +
            "Outlier: %{customdata[1]}"
        ),
        customdata=np.stack((df_outliers['Planet Name'], df_outliers['outlier']), axis=-1)
    )

    trace_fit = go.Scatter(
        x=x_fit,
        y=y_fit,
        mode='lines',
        name='Best-fit Regression Line',
        line=dict(color='green', width=3),
        hoverinfo='skip'
    )

    # Create figure with log-log axes
    fig = go.Figure(data=[trace_normal, trace_outliers, trace_fit])

    fig.update_layout(
        title="Scatter Plot of Orbital Period vs. Orbit Semi-Major Axis with Best-Fit Line and Outliers Highlighted",
        xaxis=dict(
            title="Orbital Period (Days)",
            type='log',
            autorange=True,
            showgrid=True,
            zeroline=False,
        ),
        yaxis=dict(
            title="Orbit Semi-Major Axis (AU or same unit as data)",
            type='log',
            autorange=True,
            showgrid=True,
            zeroline=False,
        ),
        legend=dict(
            title="Legend",
            yanchor="top",
            y=0.99,
            xanchor="left",
            x=0.01,
            bgcolor='rgba(255,255,255,0.8)'
        ),
        hovermode='closest',
        margin=dict(l=70, r=40, t=100, b=70)
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict