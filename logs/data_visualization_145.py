# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-27 16:54:18

def data_visualization(data_raw):
    import pandas as pd
    import json
    import plotly.graph_objects as go
    import plotly.io as pio




    # Ensure remote_ratio is treated as a categorical variable with the order 0, 50, 100
    data_raw['remote_ratio'] = pd.Categorical(data_raw['remote_ratio'], categories=[0, 50, 100], ordered=True)

    # Sort employee_residence categories alphabetically for consistent x-axis ordering
    employee_residences = sorted(data_raw['employee_residence'].unique())

    # Prepare traces for each remote_ratio category
    traces = []
    colors = {0: "#636EFA", 50: "#EF553B", 100: "#00CC96"}  # distinct colors for each remote_ratio

    for ratio in [0, 50, 100]:
        # Filter data for this remote_ratio
        df_ratio = data_raw[data_raw['remote_ratio'] == ratio]

        # Map counts to all employee_residence categories, fill missing with 0
        counts_map = df_ratio.set_index('employee_residence')['count'].reindex(employee_residences, fill_value=0)

        trace = go.Bar(
            x=employee_residences,
            y=counts_map.values,
            name=f"{ratio}%",
            marker_color=colors[ratio]
        )
        traces.append(trace)

    # Create the figure with grouped bars
    fig = go.Figure(data=traces)

    fig.update_layout(
        barmode='group',
        title="Counts of Records by Employee Residence and Remote Work Ratio",
        xaxis_title="Employee Residence (Country Code)",
        yaxis_title="Count of Records",
        legend_title="Remote Work Ratio",
        xaxis=dict(
            tickangle=-45,
            tickmode='array',
            tickvals=employee_residences,
            ticktext=employee_residences,
            automargin=True
        ),
        margin=dict(b=150)  # add bottom margin for rotated labels readability
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict