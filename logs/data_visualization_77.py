# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-17 00:02:49

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Dataset_0 is passed as data_raw
    df = data_raw.copy()
    df = df.reset_index()

    # Columns needed for the box plot
    # x = 'mean' (PaymentMode)
    # y = ['min', '25%', '50%', '75%', 'max'] (Profit Distribution)
    # group by index (PaymentMode) is effectively the categories on x-axis

    # For each PaymentMode, create a box trace with the quartiles and whiskers from the summary stats
    # Plotly boxplot can accept quartile info via boxpoints='all' and specifying quartiles,
    # but since we have only summary statistics, we will use go.Box with specified quartiles using 'q1', 'median', 'q3' parameters.

    # However, plotly's go.Box does not accept quartiles directly without raw data.
    # To mimic boxplots from summary stats, we can use 'boxmean' and 'boxpoints' as False and
    # provide the five number summary using the 'whisker' parameters: 'lowerfence', 'q1', 'median', 'q3', 'upperfence'
    # This requires use of `box` trace with argument 'quartilemethod' set to 'inclusive' or 'linear' and providing the raw data.
    # Since raw data is not provided, we will simulate boxplots by creating box traces with 'y' data points constructed from the summary stats.

    # We will construct a list of 5 values per PaymentMode representing the min, 25%, 50%, 75%, max to mimic the distribution.

    fig = go.Figure()

    for i, row in df.iterrows():
        payment_mode = row['index']
        # Construct a list of values to represent the distribution
        # replicate quartile values to form a synthetic distribution to visualize boxplot
        synthetic_data = []
        # Add min multiple times to simulate density near min
        synthetic_data.extend([row['min']] * 5)
        # Add 25%
        synthetic_data.extend([row['25%']] * 10)
        # Add median (50%)
        synthetic_data.extend([row['50%']] * 10)
        # Add 75%
        synthetic_data.extend([row['75%']] * 10)
        # Add max multiple times
        synthetic_data.extend([row['max']] * 5)

        fig.add_trace(
            go.Box(
                y=synthetic_data,
                name=payment_mode,
                boxmean=False,
                boxpoints=False
            )
        )

    fig.update_layout(
        title="Box Plot of Profit Distribution Across Payment Modes",
        xaxis_title="PaymentMode",
        yaxis_title="Profit Distribution"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict