# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-28 16:30:37

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio
    from sklearn.linear_model import LinearRegression






    df = data_raw.copy()

    # Define payment methods and categories columns
    payment_methods = {
        "Credit Card": "Payment Method_Credit Card",
        "Debit Card": "Payment Method_Debit Card",
        "Gift Card": "Payment Method_Gift Card",
        "PayPal": "Payment Method_PayPal",
    }
    categories = {
        "Clothing": "Category_Clothing",
        "Electronics": "Category_Electronics",
        "Footwear": "Category_Footwear",
        "Home Appliances": "Category_Home Appliances",
    }

    # Prepare a list to accumulate results: each row = one payment method & category pair
    records = []

    # For each payment method and category, filter rows where payment method == 1 and category == 1,
    # then calculate total quantity and average price
    for pm_name, pm_col in payment_methods.items():
        df_pm = df[df[pm_col] == 1]

        for cat_name, cat_col in categories.items():
            df_pm_cat = df_pm[df_pm[cat_col] == 1]

            if not df_pm_cat.empty:
                total_quantity = df_pm_cat["Quantity"].sum()
                avg_price = df_pm_cat["Price"].mean()
            else:
                total_quantity = 0
                avg_price = np.nan  # No data for this pair

            # Only include if avg_price is not nan (there were sales)
            if not np.isnan(avg_price):
                records.append({
                    "Payment Method": pm_name,
                    "Category": cat_name,
                    "Total Quantity": total_quantity,
                    "Average Price": avg_price,
                })

    df_plot = pd.DataFrame(records)

    # Create scatter plot with regression lines per category
    fig = go.Figure()

    # Unique categories
    unique_cats = df_plot["Category"].unique()

    # Colors for categories
    category_colors = {
        "Clothing": "blue",
        "Electronics": "red",
        "Footwear": "green",
        "Home Appliances": "orange",
    }

    # Add scatter points and regression line for each category
    for cat in unique_cats:
        df_cat = df_plot[df_plot["Category"] == cat]

        # Scatter points
        fig.add_trace(go.Scatter(
            x=df_cat["Average Price"],
            y=df_cat["Total Quantity"],
            mode='markers',
            marker=dict(size=10, color=category_colors.get(cat, "black")),
            name=f"{cat} Points",
            text=[
                f"Payment Method: {pm}<br>Category: {cat}<br>"
                f"Average Price: {price:.2f}<br>Total Quantity Sold: {qty}"
                for pm, price, qty in zip(df_cat["Payment Method"], df_cat["Average Price"], df_cat["Total Quantity"])
            ],
            hoverinfo='text',
            showlegend=True
        ))

        # Regression line calculation
        # Prepare X and y for regression
        X = df_cat["Average Price"].values.reshape(-1, 1)
        y = df_cat["Total Quantity"].values

        if len(X) > 1:
            model = LinearRegression()
            model.fit(X, y)
            x_range = np.linspace(X.min(), X.max(), 100)
            y_pred = model.predict(x_range.reshape(-1, 1))

            fig.add_trace(go.Scatter(
                x=x_range,
                y=y_pred,
                mode='lines',
                line=dict(color=category_colors.get(cat, "black"), dash='dash'),
                name=f"{cat} Regression Line",
                showlegend=True,
                hoverinfo='skip'
            ))
        else:
            # If only one point, no regression line is drawn
            pass

    fig.update_layout(
        title="Scatter Plot of Total Quantity Sold vs. Average Price per Category by Payment Method",
        xaxis_title="Average Price per Category",
        yaxis_title="Total Quantity Sold",
        legend_title="Category",
        template="plotly_white",
        hovermode='closest'
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict