# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-16 23:37:47

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # The data_raw is expected to be a DataFrame with summarized stats per PaymentMode
    # We will create a box plot using the provided summary statistics for each PaymentMode.
    # Plotly does not directly support box plot from summary stats, so we will use the 
    # box trace with quartile and whisker parameters.

    fig = go.Figure()

    # For each PaymentMode, add a box trace with quartiles and whiskers
    for idx, row in data_raw.iterrows():
        fig.add_trace(go.Box(
            name=row['PaymentMode'],
            q1=[row['25th_Percentile']],
            median=[row['Median_Profit']],
            q3=[row['75th_Percentile']],
            lowerfence=[row['Min_Profit']],
            upperfence=[row['Max_Profit']],
            mean=None,
            boxpoints=False,
            fillcolor='lightblue',
            line=dict(color='blue'),
            showlegend=False,
            marker=dict(color='blue'),
            # We provide a single box with synthetic data points to represent the summary stats.
            # However, since plotly expects raw data for box plot,
            # we use the box trace's parameters for quartiles and whiskers to simulate the box.
            # This requires setting the box trace type as 'box' and using the quartile params.
            # Note: q1, median, q3, lowerfence, upperfence are expected to be scalars, here given in lists.
        ))

    fig.update_layout(
        title="Distribution of Profit Across Different PaymentMode Categories",
        xaxis_title="PaymentMode",
        yaxis_title="Profit",
        yaxis=dict(range=[min(data_raw['Min_Profit']) * 0.95, max(data_raw['Max_Profit']) * 1.05]),
        template="plotly_white"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict