# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-28 15:18:08

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Prepare data
    df = data_raw.copy()

    # Assign distinct colors for each category
    category_colors = {
        cat: color for cat, color in zip(
            df['Category'],
            ['#636EFA', '#EF553B', '#00CC96', '#AB63FA']
        )
    }

    # Create box plot traces using summary statistics by simulating box plot components
    # Plotly box trace accepts q1, median, q3, lowerfence (min), upperfence (max) for box plot
    # We'll create one trace per category with boxpoints=False (no raw points)
    # We'll add annotations for outlier counts on top of each box

    fig = go.Figure()

    for i, row in df.iterrows():
        cat = row['Category']
        color = category_colors[cat]

        # Construct a box trace with the given summary stats
        # Plotly's Box trace can be constructed with:
        # - q1, median, q3 (quartiles)
        # - lowerfence (min), upperfence (max)
        # We can use boxpoints='outliers' but no data points exist,
        # so just simulate the box plot from stats.

        fig.add_trace(go.Box(
            name=cat,
            q1=[row['Q1']],
            median=[row['median']],
            q3=[row['Q3']],
            lowerfence=[row['min']],
            upperfence=[row['max']],
            boxpoints=False,
            marker_color=color,
            line=dict(color=color),
            fillcolor=color,
            whiskerwidth=0.5,
            boxmean=False,
            showlegend=False
        ))

    # Add annotations for outlier counts per category above the max whisker
    annotations = []
    for i, row in df.iterrows():
        cat = row['Category']
        outlier_count = int(row['Outlier Count'])
        y_pos = row['max'] + (0.05 * (row['max'] - row['min']))  # slightly above max whisker

        if outlier_count > 0:
            annotations.append(dict(
                x=cat,
                y=y_pos,
                text=f"Outliers: {outlier_count}",
                showarrow=False,
                font=dict(size=12, color='black'),
                xanchor='center',
                yanchor='bottom'
            ))

    fig.update_layout(
        title="Box Plots of Total Sales per Transaction by Product Category: Outliers and Sales Variability",
        xaxis_title="Product Category",
        yaxis_title="Total Sales per Transaction",
        annotations=annotations,
        boxmode='group',
        template='plotly_white',
        yaxis=dict(zeroline=False)
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict