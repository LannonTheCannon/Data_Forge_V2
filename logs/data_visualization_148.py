# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-27 17:04:07

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Copy data to avoid modifying original
    df = data_raw.copy()

    # Convert work_year to categorical with specified order to ensure chronological lines
    df['work_year'] = df['work_year'].astype(str)
    year_order = ['2021', '2022', '2023', '2024']
    df['work_year'] = pd.Categorical(df['work_year'], categories=year_order, ordered=True)

    # Identify highest-paying employee_residence countries by average salary
    avg_salary_by_residence = df.groupby('employee_residence')['avg_salary_in_usd'].mean()
    max_avg_salary = avg_salary_by_residence.max()
    highest_paying_residences = avg_salary_by_residence[avg_salary_by_residence == max_avg_salary].index.tolist()

    # Filter dataset to only include these highest-paying residences
    df_filtered = df[df['employee_residence'].isin(highest_paying_residences)]

    # Sort data for line continuity
    df_filtered = df_filtered.sort_values(['employee_residence', 'job_title', 'work_year'])

    # Create line traces for each combination of employee_residence and job_title
    fig = go.Figure()

    # Unique pairs
    grouped = df_filtered.groupby(['employee_residence', 'job_title'])

    for (residence, job), group in grouped:
        # Ensure the points are in chronological order by work_year
        group = group.sort_values('work_year')
        fig.add_trace(
            go.Scatter(
                x=group['work_year'],
                y=group['avg_salary_in_usd'],
                mode='lines+markers',
                name=f"{residence} - {job}",
                hovertemplate=(
                    "<b>%{text}</b><br>" +
                    "Year: %{x}<br>" +
                    "Avg Salary (USD): %{y:$,.0f}<extra></extra>"
                ),
                text=[f"{residence} - {job}"]*len(group),
            )
        )

    # Update layout
    fig.update_layout(
        title="Trends in Average Salary (USD) Over Years by Job Title and Country (Highest-Paying Residences)",
        xaxis_title="Work Year",
        yaxis_title="Average Salary (USD)",
        xaxis=dict(type='category', categoryorder='array', categoryarray=year_order),
        legend_title="Residence - Job Title",
        template='plotly_white',
        hovermode="x unified"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict