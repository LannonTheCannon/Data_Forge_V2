# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-16 22:30:26

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # The data_raw is expected to be a DataFrame with index as mission type ("Manned", "Unmanned")
    # and columns: count, mean, std, min, 25%, 50%, 75%, max

    mission_types = data_raw.index.tolist()
    # Extract the five statistics needed for the box plots
    stats_names = ["min", "25%", "50%", "75%", "max"]

    # Prepare box plot traces for each mission type using the five-number summary
    # Plotly boxplot requires raw data or can be constructed with quartile and whiskers using boxpoints=False and specifying quartiles.
    # But since we only have summary statistics, we can construct the box with go.Box with quartilemethod='linear' and provide the quartiles via the box trace attributes.

    # However, plotly Box trace does not directly accept quartile values to create boxplots.
    # Instead, we can simulate boxplots by providing the raw data points or use go.Box with the provided stats by constructing a box plot via 'boxpoints' = False, 'quartilemethod' = 'linear'
    # But since we only have summary stats, we can use go.Box's 'boxmean' and 'boxpoints' options but still need raw data.

    # Alternative: Create box shapes manually or use boxplot with fake data points reflecting the summary stats.

    # We can create boxplots by supplying the summary stats as raw data points repeated accordingly or use go.Box's custom parameters.
    # Since data is aggregate summary, let's create a boxplot by faking the data points based on the summary stats.
    # We'll create a small dataset for each mission type using the five number summary to mimic the boxplot appearance.

    def create_fake_data(row):
        # Create fake data points to represent the distribution
        # Use min, 25%, 50%, 75%, max repeated to mimic the distribution roughly
        fake_data = []
        fake_data.extend([row["min"]] * 5)
        fake_data.extend([row["25%"]] * 15)
        fake_data.extend([row["50%"]] * 30)
        fake_data.extend([row["75%"]] * 15)
        fake_data.extend([row["max"]] * 5)
        return fake_data

    fig = go.Figure()

    for mission in mission_types:
        fake_vals = create_fake_data(data_raw.loc[mission])
        fig.add_trace(go.Box(
            y=fake_vals,
            name=mission,
            boxpoints=False,
            marker_color='blue' if mission == 'Manned' else 'orange'
        ))

    fig.update_layout(
        title="Box Plot of Duration (in Days) by Mission Type",
        yaxis_title="Duration (in Days)",
        xaxis_title="Mission Type"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict