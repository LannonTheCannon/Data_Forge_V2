# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-15 19:55:40

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list and prepare for analysis.
    Specifically, verify, aggregate, and prepare data on average salary_in_usd grouped by experience_level.
    
    data_list: A list of one or more pandas DataFrames containing raw data.
    '''


    # Ensure data_list is a list
    if not isinstance(data_list, list):
        data_list = [data_list]
    
    # Concatenate all dataframes in the list into a single dataframe
    df = pd.concat(data_list, ignore_index=True)
    
    # Step 1: Verify the completeness and consistency of 'salary_in_usd'
    # Remove rows where 'salary_in_usd' is missing or not numeric
    df = df[pd.notnull(df['salary_in_usd'])]  # Filter out missing values
    # Ensure 'salary_in_usd' is of numeric type (should be, but just to be safe)
    df['salary_in_usd'] = pd.to_numeric(df['salary_in_usd'], errors='coerce')
    df = df[pd.notnull(df['salary_in_usd'])]  # Remove non-numeric conversions
    
    # Optionally, handle anomalous values (e.g., negative salaries)
    df = df[df['salary_in_usd'] >= 0]
    
    # Step 2: Aggregate data to compute average 'salary_in_usd' by 'experience_level'
    # Group by 'experience_level' and calculate mean
    grouped = df.groupby('experience_level', observed=True)['salary_in_usd'].mean().reset_index()
    
    # Step 3: Prepare data for visualization
    # Optional: Define a logical order for experience levels if needed
    # For example, order: MI, EN, SE
    experience_order = ['MI', 'EN', 'SE']
    # Filter to only experience levels present in the data
    grouped = grouped[grouped['experience_level'].isin(experience_order)]
    # Set categorical type for ordering
    grouped['experience_level'] = pd.Categorical(grouped['experience_level'], categories=experience_order, ordered=True)
    # Sort by the defined order
    grouped = grouped.sort_values('experience_level')
    
    # Return the aggregated DataFrame
    return grouped