# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-15 21:53:39

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list and prepare for boxplot visualization.
    '''


    # Ensure data_list is a list; if not, convert to list
    if not isinstance(data_list, list):
        data_list = [data_list]
    
    # Concatenate all dataframes into a single dataframe
    data = pd.concat(data_list, ignore_index=True)

    # Step 1: Verify unique values and categories within 'company_size'
    # (Optional: For debugging or understanding distribution, but not necessary for wrangling)
    # unique_sizes = data['company_size'].dropna().unique()

    # Step 2: Keep the entire dataset for the boxplot; no filtering needed unless specified.

    # Step 3: Check for and handle missing/null values in 'salary_in_usd' and 'company_size'
    # Drop rows with missing 'salary_in_usd' or 'company_size'
    data = data.dropna(subset=['salary_in_usd', 'company_size'])

    # Step 4: Ensure 'salary_in_usd' is numeric
    # Confirm data type; if not, convert
    if not pd.api.types.is_numeric_dtype(data['salary_in_usd']):
        data['salary_in_usd'] = pd.to_numeric(data['salary_in_usd'], errors='coerce')
        # Drop any resulting NaN values after conversion
        data = data.dropna(subset=['salary_in_usd'])

    # Step 5: For a boxplot, raw data per individual is preferred; no aggregation needed.

    # Step 6: Prepare data for plotting
    # The data is already associated: 'company_size' category with 'salary_in_usd' values.

    # Optional: Standardize 'company_size' categories (e.g., ensure consistent casing)
    data['company_size'] = data['company_size'].str.upper().str.strip()

    # Return the cleaned and prepared DataFrame
    return data