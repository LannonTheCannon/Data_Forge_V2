# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-18 17:28:55

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data to determine the relationship between '100g_USD' and 'rating',
    including handling missing values, filtering, and calculating correlation coefficient.
    
    data_list: A list of one or more pandas data frames containing the raw data to be wrangled.
    
    Returns a single DataFrame with cleaned data and a new column 'pearson_corr_100gUSD_rating'
    containing the Pearson correlation coefficient between '100g_USD' and 'rating'.
    '''


    # If input is not a list, convert it to a list for uniform processing
    if not isinstance(data_list, list):
        data_list = [data_list]
    
    # Since instructions say all data is in one dataset "main", take the first dataframe
    df = data_list[0].copy()
    
    # Step 1 & 2: Inspect and handle missing values in '100g_USD' and 'rating'
    # Drop rows where either '100g_USD' or 'rating' is null to ensure valid correlation calculation
    df_clean = df.dropna(subset=['100g_USD', 'rating']).copy()
    
    # Step 3: Check data types and convert if necessary
    # '100g_USD' should be float64, 'rating' should be numeric (int64 is fine)
    if not pd.api.types.is_float_dtype(df_clean['100g_USD']):
        df_clean['100g_USD'] = pd.to_numeric(df_clean['100g_USD'], errors='coerce')
    if not pd.api.types.is_numeric_dtype(df_clean['rating']):
        df_clean['rating'] = pd.to_numeric(df_clean['rating'], errors='coerce')
    
    # After conversion, drop any newly created NaNs due to conversion errors
    df_clean = df_clean.dropna(subset=['100g_USD', 'rating'])
    
    # Step 5: Calculate Pearson correlation coefficient between '100g_USD' and 'rating'
    # Store the correlation in a variable
    pearson_corr = df_clean['100g_USD'].corr(df_clean['rating'], method='pearson')
    
    # Add the correlation coefficient as a new column with the same value for all rows
    df_clean['pearson_corr_100gUSD_rating'] = pearson_corr
    
    # Return the cleaned dataframe with correlation coefficient column included
    return df_clean