# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-16 19:31:30

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list by categorizing Victim_Age into intervals,
    computing the average Offender_Age per Victim_Age_Group, and preparing the data
    for visualization.
    
    Returns a DataFrame with Victim_Age_Group and corresponding Avg_Offender_Age.
    '''


    # Ensure input is a list
    if not isinstance(data_list, list):
        data_list = [data_list]
    
    # Concatenate all dataframes in the list into a single dataframe
    df = pd.concat(data_list, ignore_index=True)
    
    # Drop rows where Victim_Age or Offender_Age are NaN, as they are needed for grouping
    df = df.dropna(subset=['Victim_Age', 'Offender_Age'])
    
    # Define age bins and labels
    bins = [0, 24, 35, 50, np.inf]
    labels = ['<25', '25-35', '36-50', '>50']
    
    # Create Victim_Age_Group using pd.cut
    df['Victim_Age_Group'] = pd.cut(df['Victim_Age'], bins=bins, labels=labels, right=True)
    
    # Group by Victim_Age_Group and calculate mean Offender_Age
    grouped = df.groupby('Victim_Age_Group')['Offender_Age'].mean().reset_index()
    
    # Rename the Offender_Age column to indicate it's an average
    grouped.rename(columns={'Offender_Age': 'Avg_Offender_Age'}, inplace=True)
    
    # For clarity, ensure Victim_Age_Group is ordered properly
    ordered_categories = ['<25', '25-35', '36-50', '>50']
    grouped['Victim_Age_Group'] = pd.Categorical(grouped['Victim_Age_Group'], categories=ordered_categories, ordered=True)
    
    # Sort by Victim_Age_Group for consistent plotting order
    grouped = grouped.sort_values('Victim_Age_Group')
    
    return grouped