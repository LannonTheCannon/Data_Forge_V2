# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-17 11:56:36

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list to create a DataFrame showing the distribution of the different ratings.
    
    data_list: A list of one or more pandas data frames containing the raw data to be wrangled.
    
    Returns:
        A pandas DataFrame with columns ['rating', 'count', 'percentage'] showing the count and percentage distribution of each rating.
    '''


    # Ensure data_list is a list even if a single DataFrame is passed
    if not isinstance(data_list, list):
        data_list = [data_list]
    
    # Since user provided only one dataset "main", we use the first dataframe
    df = data_list[0]

    # Step 1: Inspect 'rating' column
    # Check if 'rating' column exists
    if 'rating' not in df.columns:
        # If no rating column, return empty DataFrame with proper columns
        return pd.DataFrame(columns=['rating', 'count', 'percentage'])
    
    # Convert rating to numeric if not already (should be int64 as per summary)
    df['rating'] = pd.to_numeric(df['rating'], errors='coerce')

    # Drop rows where rating is missing or NaN
    df_clean = df.dropna(subset=['rating'])

    # Step 2: Count frequency of each unique rating
    rating_distribution = df_clean['rating'].value_counts().sort_index().reset_index()
    rating_distribution.columns = ['rating', 'count']

    # Step 4: Calculate relative frequencies (percentage)
    total = rating_distribution['count'].sum()
    rating_distribution['percentage'] = 100 * rating_distribution['count'] / total

    # Step 3: Sort by rating ascending for clarity (already sorted by sort_index above)
    rating_distribution = rating_distribution.sort_values(by='rating').reset_index(drop=True)

    # Return the final DataFrame containing rating distribution
    return rating_distribution