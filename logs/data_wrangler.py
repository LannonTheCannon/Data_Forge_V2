# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-16 22:22:22

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list to compare the distribution of revenue across different genres.
    
    data_list: A list of one or more pandas data frames containing the raw data to be wrangled.
    '''


    # Ensure data_list is a list even if a single dataframe is passed
    if not isinstance(data_list, list):
        data_list = [data_list]
    
    # For this task, we only have one dataset named "main" so use the first dataframe
    df = data_list[0].copy()
    
    # Step 1: Filter for movies only (type == 'Movie')
    df_movies = df[df['type'] == 'Movie'].copy()
    
    # Step 4: Handle missing or zero revenue values - exclude zero or missing revenue for meaningful distribution
    # Also exclude negative revenue if any (not expected but just in case)
    df_movies = df_movies[df_movies['revenue'].notna() & (df_movies['revenue'] > 0)]
    
    # Step 2: Split genres into individual genre entries
    # Some entries might have missing or empty genres, handle those by dropping or filtering out
    df_movies = df_movies[df_movies['genres'].notna() & (df_movies['genres'].str.strip() != '')].copy()
    
    # Create a list of genres per movie by splitting on ', '
    df_movies['genres_list'] = df_movies['genres'].str.split(', ')
    
    # Explode so each row is one movie-genre pair
    df_exploded = df_movies.explode('genres_list')
    
    # Rename exploded genre column for clarity
    df_exploded.rename(columns={'genres_list': 'genre'}, inplace=True)
    
    # Step 3 & 5: Aggregate revenue by genre with distribution metrics
    # Group by genre and calculate:
    # - count of movies per genre
    # - sum of revenue (total revenue)
    # - mean revenue (average)
    # - median revenue
    # - std deviation
    # - quartiles (25th and 75th percentiles)
    agg_funcs = {
        'revenue': ['count', 'sum', 'mean', 'median', 'std',
                    lambda x: np.percentile(x, 25),
                    lambda x: np.percentile(x, 75)]
    }
    
    genre_revenue_stats = df_exploded.groupby('genre').agg(agg_funcs)
    
    # Flatten MultiIndex columns
    genre_revenue_stats.columns = [
        'count', 'total_revenue', 'mean_revenue', 'median_revenue', 'std_revenue', 'q25_revenue', 'q75_revenue'
    ]
    
    # Step 7: Label genres with low sample size (e.g., less than 10 movies)
    genre_revenue_stats['low_sample_size'] = genre_revenue_stats['count'] < 10
    
    # Reorder columns for readability
    genre_revenue_stats = genre_revenue_stats.reset_index()[[
        'genre', 'count', 'low_sample_size', 'total_revenue', 'mean_revenue', 
        'median_revenue', 'std_revenue', 'q25_revenue', 'q75_revenue'
    ]]
    
    # Return the aggregated dataframe with revenue distribution stats per genre
    return genre_revenue_stats