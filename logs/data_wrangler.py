# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_wrangling_agent
# Time Created: 2025-04-28 16:14:52

def data_wrangler(data_list):
    import pandas as pd
    import numpy as np
    '''
    Wrangle the data provided in data_list to calculate average daily total sales 
    versus day of the month, grouped by year, focusing on completed sales only.
    
    data_list: A list of one or more pandas data frames containing the raw data to be wrangled.
    
    Returns:
        pandas.DataFrame with columns ['Year', 'Day', 'Total Sales'] where 'Total Sales' is the 
        average daily total sales for each day of the month grouped by year.
    '''


    # Ensure input is a list of DataFrames
    if not isinstance(data_list, list):
        data_list = [data_list]
        
    # If multiple datasets, concatenate them vertically (assuming same schema)
    df = pd.concat(data_list, ignore_index=True)
    
    # Step 1: Filter to Completed Sales Only (Status_Completed == 1)
    df_filtered = df[df['Status_Completed'] == 1].copy()
    
    # Step 2: Aggregate Total Sales per Day (group by Year, Month, Day)
    # Sum Total Sales per each distinct day to get daily total sales
    daily_sales = df_filtered.groupby(['Year', 'Month', 'Day'], as_index=False)['Total Sales'].sum()
    
    # Step 3: Calculate Average Daily Total Sales by Day of Month and Year
    # For each Year and Day (day of month), average the daily total sales across months
    avg_daily_sales = daily_sales.groupby(['Year', 'Day'], as_index=False)['Total Sales'].mean()
    
    # Step 4: Sort results by Year and Day for easier analysis
    avg_daily_sales = avg_daily_sales.sort_values(['Year', 'Day']).reset_index(drop=True)
    
    # Optional Step 5 (not performed here): 
    # Could check for missing days per year if needed for anomaly detection
    
    # Return the resulting DataFrame with average daily total sales by year and day of month
    return avg_daily_sales