# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-26 18:11:32

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio
    from plotly.subplots import make_subplots





    # Copy data to avoid modifying original
    df = data_raw.copy()

    # Convert Discovery Year to string for categorical x-axis
    df['Discovery Year'] = df['Discovery Year'].astype(str)

    # Aggregate Planet Count by Discovery Method, Discovery Facility and Discovery Year
    agg_df = df.groupby(['Discovery Method', 'Discovery Facility', 'Discovery Year'], as_index=False)['Planet Count'].sum()

    # Get unique categories for ordering axes
    discovery_methods = sorted(agg_df['Discovery Method'].unique())
    discovery_years = sorted(agg_df['Discovery Year'].unique())
    discovery_facilities = sorted(agg_df['Discovery Facility'].unique())

    # Create subplot specs and titles for each Discovery Method facet

    n_methods = len(discovery_methods)
    # Arrange subplots in 2 rows x 2 cols because there are 4 unique methods
    rows, cols = 2, 2
    fig = make_subplots(
        rows=rows, cols=cols,
        subplot_titles=discovery_methods,
        shared_xaxes=False,
        shared_yaxes=False,
        horizontal_spacing=0.1,
        vertical_spacing=0.15,
    )

    # Create a heatmap for each Discovery Method
    for idx, method in enumerate(discovery_methods):
        # Filter data for this method
        method_df = agg_df[agg_df['Discovery Method'] == method]

        # Pivot table: rows=Discovery Facility, columns=Discovery Year, values=sum of Planet Count
        heatmap_data = pd.pivot_table(
            method_df,
            values='Planet Count',
            index='Discovery Facility',
            columns='Discovery Year',
            fill_value=0,
            aggfunc=np.sum
        )

        # Reindex rows and columns to have consistent order and include all categories
        heatmap_data = heatmap_data.reindex(index=discovery_facilities, columns=discovery_years, fill_value=0)

        # Coordinates for subplot placement
        row = idx // cols + 1
        col = idx % cols + 1

        # Create heatmap trace
        heatmap = go.Heatmap(
            z=heatmap_data.values,
            x=heatmap_data.columns,
            y=heatmap_data.index,
            coloraxis="coloraxis",
            hovertemplate='Facility: %{y}<br>Year: %{x}<br>Planet Count: %{z}<extra></extra>'
        )

        fig.add_trace(heatmap, row=row, col=col)

        # Update xaxis and yaxis titles for each subplot
        fig.update_xaxes(title_text="Discovery Year", row=row, col=col, type='category', categoryorder='array', categoryarray=discovery_years)
        fig.update_yaxes(title_text="Discovery Facility", row=row, col=col, type='category', categoryorder='array', categoryarray=discovery_facilities)

    # Update layout with a single coloraxis for all heatmaps for consistent color scale
    fig.update_layout(
        title_text="Heatmap of Planet Discoveries per Year and Facility, Segmented by Discovery Method",
        coloraxis=dict(
            colorscale='Viridis',
            colorbar=dict(title="Planet Count"),
            cmin=0,
            cauto=True
        ),
        height=900, width=1200,
        showlegend=False,
        margin=dict(t=100)
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict