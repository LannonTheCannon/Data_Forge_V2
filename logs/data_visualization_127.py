# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-21 16:17:35

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio
    import plotly.express as px






    # Filter rows where Type == 'Bin_Distribution' since these rows have Temp_bin and Mass_bin data
    df = data_raw[data_raw['Type'] == 'Bin_Distribution'].copy()

    # Drop rows with missing Temp_bin or Mass_bin as we need these for plotting
    df = df.dropna(subset=['Temp_bin', 'Mass_bin'])

    # Define ordinal mappings for Temp_bin and Mass_bin categories to simulate numeric scale
    temp_order = ['Cool', 'Moderate', 'Warm', 'Hot']
    mass_order = ['Small', 'Medium', 'Large']

    temp_map = {cat: i for i, cat in enumerate(temp_order)}
    mass_map = {cat: i for i, cat in enumerate(mass_order)}

    df['Temp_num'] = df['Temp_bin'].map(temp_map)
    df['Mass_num'] = df['Mass_bin'].map(mass_map)

    # For plotting, we want a scatter plot of Temp_num vs Mass_num colored/shaped by Discovery Method
    # Also overlay best-fit regression lines for each Discovery Method

    # We will plot only methods with some data points (Bin_Count > 0)
    df = df[df['Bin_Count'] > 0]

    discovery_methods = df['Discovery Method'].unique()
    colors = px.colors.qualitative.Plotly
    color_map = {dm: colors[i % len(colors)] for i, dm in enumerate(discovery_methods)}

    fig = go.Figure()

    # Scatter points per discovery method
    for dm in discovery_methods:
        dff = df[df['Discovery Method'] == dm]
        fig.add_trace(go.Scatter(
            x=dff['Temp_num'],
            y=dff['Mass_num'],
            mode='markers',
            name=dm,
            marker=dict(color=color_map[dm], size=8),
            hovertemplate=(
                "Discovery Method: %{text}<br>"
                "Temp Category: %{x}<br>"
                "Mass Category: %{y}<br>"
                "Bin Count: %{customdata}<extra></extra>"),
            text=[dm]*len(dff),
            customdata=dff['Bin_Count']
        ))

    # Add best-fit lines (linear regression) for each method
    for dm in discovery_methods:
        dff = df[df['Discovery Method'] == dm]
        # If there is only one or no point, skip regression line
        if len(dff) < 2:
            continue
        x = dff['Temp_num'].values
        y = dff['Mass_num'].values
        # Weighted regression by Bin_Count to reflect counts in fitting
        weights = dff['Bin_Count'].values
        # Compute weighted linear regression: y = m*x + b
        # Using np.polyfit with weights
        m, b = np.polyfit(x, y, 1, w=weights)
        x_line = np.array([min(x), max(x)])
        y_line = m * x_line + b
        fig.add_trace(go.Scatter(
            x=x_line,
            y=y_line,
            mode='lines',
            name=f'{dm} Fit',
            line=dict(color=color_map[dm], dash='dash'),
            showlegend=True,
            hoverinfo='skip'
        ))

    # Adjust axes to show category labels at correct positions
    fig.update_xaxes(
        tickmode='array',
        tickvals=list(temp_map.values()),
        ticktext=temp_order,
        title_text="Stellar Effective Temperature Category",
        range=[-0.5, len(temp_order) - 0.5]
    )
    fig.update_yaxes(
        tickmode='array',
        tickvals=list(mass_map.values()),
        ticktext=mass_order,
        title_text="Planet Mass Category",
        range=[-0.5, len(mass_order) - 0.5]
    )

    fig.update_layout(
        title="Stellar Effective Temperature vs. Planet Mass by Discovery Method with Best-Fit Lines",
        legend_title="Discovery Method",
        template="plotly_white",
        height=600,
        width=900,
        margin=dict(l=80, r=40, t=100, b=80)
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict