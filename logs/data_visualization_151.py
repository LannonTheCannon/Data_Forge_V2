# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-28 12:12:59

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Data is assumed clean as per instructions (no missing values)
    # Create box plots grouped by Category and segmented by Status

    categories = data_raw['Category'].unique()
    statuses = data_raw['Status'].unique()

    # Sort categories and statuses for consistent order
    categories = sorted(categories)
    statuses = sorted(statuses)

    fig = go.Figure()

    # Offset for box plots within each category to dodge side-by-side
    # We will use categorical axis with two-level grouping using the 'x' as a combined string
    # But plotly has no direct nested grouping in box plots, so we create separate traces for each Status.
    # Use the 'Category' as x and color by 'Status' with grouping by setting boxmode to 'group'

    for status in statuses:
        filtered = data_raw[data_raw['Status'] == status]
        fig.add_trace(
            go.Box(
                y=filtered['Price'],
                x=filtered['Category'],
                name=status,
                boxpoints='outliers',
                marker=dict(size=4),
                line=dict(width=1),
                boxmean=False,
                legendgroup=status,
                offsetgroup=status,
                # Show all Status groups side-by-side per category by offsetgroup
            )
        )

    fig.update_layout(
        title="Price Distribution by Category Segmented by Order Completion Status",
        xaxis_title="Category",
        yaxis_title="Price",
        boxmode='group',
        legend_title_text="Status",
        yaxis=dict(
            autorange=True,
            zeroline=False,
            showgrid=True,
            type='linear'
        ),
        template='plotly_white'
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict