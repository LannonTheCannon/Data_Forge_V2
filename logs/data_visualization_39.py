# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-16 22:06:28

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # We have one row per genre with summary stats: min, median, max budgets.
    # To create a box plot representing the distribution, we simulate data points per genre
    # around the min, median, and max values to define the box plot shape.

    # For each genre, create a small synthetic distribution using min, median, max
    # We'll create 3 points per genre: min, median, max, which represent the spread.
    # This is a minimal approach to show the box plot with the given summary stats.

    # Prepare lists to hold the synthetic data
    data = {'genre': [], 'budget': []}

    for _, row in data_raw.iterrows():
        genre = row['genre']
        # Create synthetic data points to represent the distribution
        # To better visualize boxplots, add multiple points at min, median, max
        # For simplicity, add 3 points each
        data['genre'].extend([genre]*9)
        data['budget'].extend([
            row['min'], row['min'], row['min'],
            row['median'], row['median'], row['median'],
            row['max'], row['max'], row['max'],
        ])

    df_synthetic = pd.DataFrame(data)

    # Create box plot with genre on x-axis and budget on y-axis
    fig = go.Figure()

    genres = df_synthetic['genre'].unique()
    for genre in genres:
        budgets = df_synthetic.loc[df_synthetic['genre'] == genre, 'budget']
        fig.add_trace(go.Box(
            y=budgets,
            name=genre,
            boxpoints=False,  # no individual points, just the box
            marker_color='blue',
            line=dict(width=1)
        ))

    fig.update_layout(
        title="Budget Distribution by Genre (min, median, max)",
        xaxis_title="Genre",
        yaxis_title="Budget",
        xaxis=dict(tickangle=45),
        margin=dict(t=60, b=150),
        height=600,
        template="plotly_white"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict