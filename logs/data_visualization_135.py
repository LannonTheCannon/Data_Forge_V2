# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-26 17:54:04

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio
    from sklearn.linear_model import LinearRegression






    # Copy data to avoid modifying original dataframe
    df = data_raw.copy()

    # Prepare colors and markers for categories
    category_colors = {"Transit": "blue", "Other": "red"}
    category_markers = {"Transit": "circle", "Other": "square"}

    fig = go.Figure()

    # For each category, plot scatter points and regression line
    for category in ["Transit", "Other"]:
        df_cat = df[df["Discovery Method Category"] == category]

        # Scatter points
        fig.add_trace(
            go.Scatter(
                x=df_cat["Stellar Metallicity"],
                y=df_cat["Num Planets"],
                mode="markers",
                name=category,
                marker=dict(
                    color=category_colors[category],
                    symbol=category_markers[category],
                    size=7,
                    opacity=0.6,
                    line=dict(width=0.5, color='DarkSlateGrey')
                ),
                hovertemplate=(
                    "Stellar Metallicity: %{x}<br>" +
                    "Num Planets: %{y}<br>" +
                    "Discovery Method Category: " + category + "<extra></extra>"
                )
            )
        )

        # Fit linear regression line for trend
        X = df_cat["Stellar Metallicity"].values.reshape(-1, 1)
        y = df_cat["Num Planets"].values

        # Only fit if enough data points (>1)
        if len(X) > 1:
            model = LinearRegression()
            model.fit(X, y)
            x_range = np.linspace(X.min(), X.max(), 100)
            y_pred = model.predict(x_range.reshape(-1, 1))

            fig.add_trace(
                go.Scatter(
                    x=x_range,
                    y=y_pred,
                    mode="lines",
                    name=f"{category} Trend",
                    line=dict(color=category_colors[category], width=2),
                    hoverinfo='skip',
                    showlegend=True,
                )
            )

    # Update layout with titles and axis labels
    fig.update_layout(
        title="Relationship Between Stellar Metallicity and Number of Planets by Discovery Method Category",
        xaxis_title="Stellar Metallicity",
        yaxis_title="Number of Planets",
        legend_title="Discovery Method Category",
        template="plotly_white",
        hovermode="closest"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict