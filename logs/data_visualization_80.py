# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-17 00:08:09

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Aggregate the data by Year-Month and Category summing the Amount
    df_agg = data_raw.groupby(['Year-Month', 'Category'], as_index=False)['Amount'].sum()

    # Sort Year-Month to ensure proper order on x-axis
    # Convert Year-Month to datetime for sorting
    df_agg['Year-Month_dt'] = pd.to_datetime(df_agg['Year-Month'], format='%Y-%m')
    df_agg = df_agg.sort_values('Year-Month_dt')

    # Get unique categories and sorted Year-Month values
    categories = df_agg['Category'].unique()
    year_months = df_agg['Year-Month_dt'].dt.strftime('%Y-%m').unique()

    # Create traces for each category
    traces = []
    for category in categories:
        df_cat = df_agg[df_agg['Category'] == category]
        # Align amounts to all year_months, filling missing with 0
        df_cat_full = pd.DataFrame({'Year-Month': year_months})
        df_cat_full = df_cat_full.merge(df_cat[['Year-Month', 'Amount']], on='Year-Month', how='left')
        df_cat_full['Amount'] = df_cat_full['Amount'].fillna(0)
        traces.append(
            go.Bar(
                name=category,
                x=df_cat_full['Year-Month'],
                y=df_cat_full['Amount']
            )
        )

    # Create layout with grouped bar mode
    layout = go.Layout(
        title="Total Amount for Each Category Across Year-Month",
        barmode='group',
        xaxis=dict(title='Year-Month', tickangle=-45),
        yaxis=dict(title='Amount'),
        legend_title_text='Category',
        margin=dict(b=120)  # extra bottom margin for x-axis labels
    )

    fig = go.Figure(data=traces, layout=layout)

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict