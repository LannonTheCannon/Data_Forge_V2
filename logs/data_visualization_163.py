# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-28 16:15:06

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Ensure data types are correct (should be already, but safe)
    data = data_raw.copy()
    data["Year"] = data["Year"].astype(int)
    data["Day"] = data["Day"].astype(int)
    data["Total Sales"] = data["Total Sales"].astype(float)
    
    fig = go.Figure()
    
    # Get unique years for grouping (though only 2025 in this dataset)
    years = data["Year"].unique()
    
    # Colors for different years (Plotly default qualitative palette)
    colors = px_colors = ['#636EFA', '#EF553B', '#00CC96', '#AB63FA', '#FFA15A', '#19D3F3', '#FF6692', '#B6E880', '#FF97FF', '#FECB52']
    
    for i, year in enumerate(years):
        df_year = data[data["Year"] == year]
        
        # Scatter points
        fig.add_trace(go.Scatter(
            x=df_year["Day"],
            y=df_year["Total Sales"],
            mode='markers',
            name=str(year),
            marker=dict(color=colors[i % len(colors)], size=8),
            legendgroup=str(year),
            showlegend=True,
            hovertemplate='Year: %{text}<br>Day: %{x}<br>Total Sales: %{y:.2f}<extra></extra>',
            text=[str(year)]*len(df_year)
        ))
        
        # Best fit line using numpy polyfit (1st degree)
        coeffs = np.polyfit(df_year["Day"], df_year["Total Sales"], 1)
        fit_line_y = coeffs[0]*df_year["Day"] + coeffs[1]
        
        # Add line trace
        fig.add_trace(go.Scatter(
            x=df_year["Day"],
            y=fit_line_y,
            mode='lines',
            name=f"{year} Trend",
            line=dict(color=colors[i % len(colors)], dash='solid'),
            legendgroup=str(year),
            showlegend=True,
            hoverinfo='skip'
        ))
    
    fig.update_layout(
        title="Average Daily Total Sales by Day of Month Grouped by Year (2025)",
        xaxis_title="Day of the Month",
        yaxis_title="Average Total Sales",
        xaxis=dict(range=[1,31], dtick=2),
        yaxis=dict(rangemode="tozero"),
        legend_title="Year",
        template="plotly_white"
    )
    
    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)
    
    return fig_dict