# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-16 20:30:56

def data_visualization(data_raw):
    import pandas as pd
    import plotly.graph_objects as go
    import plotly.io as pio
    import json




    # Map the ARRESTED values to gender categories based on the data summary
    # Female: 0, Male: 0, Other: 6638
    gender_mapping = {
        0: ['Female', 'Male'],
        6638: ['Other']
    }

    # Create a DataFrame from the raw data
    df = data_raw.copy()

    # Map ARRESTED values to gender categories
    def map_gender(arrested_value):
        for key, categories in gender_mapping.items():
            if arrested_value == key:
                return categories
        return []

    # Apply the mapping
    df['Gender'] = df['ARRESTED'].apply(map_gender)

    # Expand the DataFrame so each row corresponds to a single gender category
    df_expanded = df.explode('Gender')

    # Count occurrences of each gender
    gender_counts = df_expanded['Gender'].value_counts().reindex(['Male', 'Female', 'Other'], fill_value=0)

    # Prepare data for grouped bar chart
    categories = ['Male', 'Female', 'Other']
    counts = [gender_counts[cat] for cat in categories]

    # Create grouped bar chart
    fig = go.Figure()

    # Use plotly's built-in color sequence instead of go.utility.colors.qualitative
    colors = ['#2ca02c', '#ff7f0e', '#d62728']  # Example colors for Male, Female, Other

    # Add bars for each category
    for idx, category in enumerate(categories):
        fig.add_trace(
            go.Bar(
                x=[category],
                y=[gender_counts[category]],
                name='Offender Status',
                marker_color=colors[idx],
                showlegend=(idx == 0)  # Show legend only once
            )
        )

    # Update layout with titles and labels
    fig.update_layout(
        title='Distribution of Offender Status by Gender',
        xaxis_title='Gender',
        yaxis_title='Count of Offender Status',
        legend_title_text='Offender Status'
    )

    # Convert figure to JSON
    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)
    return fig_dict