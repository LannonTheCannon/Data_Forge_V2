# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-17 00:01:38

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # The data_raw is expected to be a pandas DataFrame with the provided structure

    # Extract PaymentMode categories
    payment_modes = data_raw["PaymentMode"].tolist()

    # Prepare box plot traces using the percentiles and extremes
    # We will create 5 box plots, one for each statistic, placed side by side for each PaymentMode.
    # However, box plots typically show distribution from raw data.
    # Since we only have summary statistics, we will simulate box plots using box traces with y values set as single points
    # but this won't show a distribution. Instead, we can create custom shapes to represent the percentiles.
    # Given instructions, we interpret this as a multi-box plot per PaymentMode for these statistics.
    # So alternatively, we can create one box plot with PaymentMode on x axis and y as the corresponding value for each statistic.
    # But since y_axis is a list of columns, we interpret that we want to show all these as separate boxes per PaymentMode.
    # To achieve this in plotly, we can melt the data to long format for these five y columns and plot box plots grouped by PaymentMode and statistic.

    # Melt data to long format
    df_long = pd.melt(
        data_raw,
        id_vars=["PaymentMode"],
        value_vars=["Profit_min", "Profit_25th_percentile", "Profit_median", "Profit_75th_percentile", "Profit_max"],
        var_name="Profit_Statistic",
        value_name="Profit_Value"
    )

    # Create box plot with x as PaymentMode, y as Profit_Value, and color as Profit_Statistic to distinguish the statistics
    # But each PaymentMode has only one value per statistic, so box plot will not show distribution.
    # Instead, we can create a grouped bar chart or scatter plot with lines to represent these percentiles.
    # However, instructions specifically ask for box_plot.
    # Given the data limitations, we can create a box plot where each box corresponds to one Profit_Statistic category across PaymentModes.
    # But there are only 5 PaymentModes, so boxes will be limited.
    # We will create box plots for each Profit_Statistic showing distribution across PaymentModes.
    # Let's pivot the data: For each Profit_Statistic, box plot on y, x is Profit_Statistic with points colored by PaymentMode.

    # Pivot so each Profit_Statistic is an x category with y as Profit_Value and color by PaymentMode
    # This will show distribution of values for each statistic across PaymentModes

    fig = go.Figure()

    # For each PaymentMode, add a box plot trace with x as Profit_Statistic and y as Profit_Value
    # This will create overlapping boxes for each PaymentMode per Profit_Statistic
    # But box plots require multiple y values per category to show distribution, here we have only one value per category
    # So box plots will appear as single points.
    # Instead, we can create scatter points connected by lines to show distribution per PaymentMode
    # But instructions want box_plot specifically.

    # Alternative approach:
    # Create one box plot per PaymentMode using the 5 values as data points.
    # So x axis is PaymentMode, y axis is the 5 profit values per PaymentMode.
    # This way, each box plot represents the distribution of the profit statistics per PaymentMode.

    # Prepare data for this approach
    box_data = []
    for mode in payment_modes:
        values = data_raw.loc[data_raw["PaymentMode"] == mode, ["Profit_min", "Profit_25th_percentile", "Profit_median", "Profit_75th_percentile", "Profit_max"]].values.flatten()
        box_data.append(go.Box(
            y=values,
            name=mode,
            boxpoints='all',  # show all points
            jitter=0.3,
            pointpos=-1.8,
            marker=dict(size=6),
            line=dict(width=1),
        ))

    fig = go.Figure(data=box_data)

    fig.update_layout(
        title="Distribution of Profit across different PaymentMode categories based on Profit percentiles and extremes",
        yaxis_title="Profit Values",
        xaxis_title="PaymentMode",
        boxmode='group'
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict