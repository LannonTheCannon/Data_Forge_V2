# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-16 21:59:31

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # We have summary stats in wide format, convert to long format for box plot
    # For each experience_level, the box plot requires min, Q1(25%), median, Q3(75%), max

    # Prepare data for box plots: Each box plot corresponds to an experience level with given stats.
    # Plotly box plot can be created with the boxpoints=False and specifying quartile values via boxmean=False
    # But to set the quartiles explicitly, we can use go.Box with quartilemethod='linear' and 
    # provide the raw data points or use the box plot's custom boxes via boxpoints='all' is not suitable here.
    # Since we only have summary statistics, we use go.Box with custom parameters via boxpoints=False and 
    # specify quartiles via 'q1', 'median', 'q3', 'lowerfence', 'upperfence' in box trace's 'boxpoints' attribute is not possible.
    # Plotly does not natively support creating box plots from summary statistics only.
    # Instead, we can create box plots using go.Box with 'boxmean' and 'boxpoints' but it expects raw data.
    # Since raw data is unavailable, we can simulate data from summary stats or use a candlestick plot.
    # But the instruction is to create a box plot representing the summary stats.
    # We can use go.Box with the 'boxpoints' set to False and set the quartiles using the 'box' trace's 'q1', 'median', 'q3' arguments by setting 'boxpoints' to False and 
    # setting the box trace's 'quartilemethod' to 'linear' (default), but the trace requires raw data.
    # Alternative: Use go.Box with the "box" trace and pass the summary stats as a list of points to mimic a distribution.
    # Create a synthetic distribution for each experience level using the summary stats to feed into box plot.

    # Create synthetic data for each experience level to mimic the distribution described by the summary stats
    # We'll generate 1000 points per experience level using min, 25%, median, 75%, max as quantiles.

    def synthetic_data(row):
        # Generate data points by interpolating between min, 25%, median, 75%, max
        # We will generate 200 points between each pair of quantiles to simulate distribution
        q_points = [row['min'], row['25%'], row['median'], row['75%'], row['max']]
        data = []
        for i in range(len(q_points)-1):
            data.extend(np.linspace(q_points[i], q_points[i+1], 200))
        return data

    # Build list of traces, one per experience level
    traces = []
    for idx, row in data_raw.iterrows():
        y = synthetic_data(row)
        trace = go.Box(
            y=y,
            name=row['experience_level'],
            boxpoints=False,
            marker_color='blue'
        )
        traces.append(trace)

    fig = go.Figure(data=traces)
    fig.update_layout(
        title="Salary distribution by Experience Level (based on summary statistics)",
        xaxis_title="Experience Level",
        yaxis_title="Salary in USD",
        boxmode='group'
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict