# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-28 15:52:13

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Filter categories of interest explicitly (Electronics and Clothing)
    categories_of_interest = ["Electronics", "Clothing"]
    df = data_raw[data_raw["Category"].isin(categories_of_interest)].copy()

    # Define colors for categories to ensure distinct and consistent colors
    category_colors = {
        "Electronics": "blue",
        "Clothing": "red"
    }

    fig = go.Figure()

    # For each category, plot scatter points and add a regression line
    for category in categories_of_interest:
        df_cat = df[df["Category"] == category]
        x = df_cat["Quantity"]
        y = df_cat["Price"]
        
        # Scatter plot for category
        fig.add_trace(go.Scatter(
            x=x,
            y=y,
            mode='markers',
            name=category,
            marker=dict(color=category_colors[category]),
            legendgroup=category
        ))
        
        # Calculate linear regression for best-fit line
        if len(df_cat) > 1:
            slope, intercept = np.polyfit(x, y, 1)
            x_line = np.linspace(x.min(), x.max(), 100)
            y_line = slope * x_line + intercept
            
            fig.add_trace(go.Scatter(
                x=x_line,
                y=y_line,
                mode='lines',
                name=f"{category} Trendline",
                line=dict(color=category_colors[category], dash='dash'),
                legendgroup=category,
                showlegend=False
            ))

    fig.update_layout(
        title="Scatter Plot of Price versus Quantity by Category with Best-Fit Lines",
        xaxis_title="Quantity",
        yaxis_title="Price",
        legend_title="Category",
        template="plotly_white"
    )
    
    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)
    
    return fig_dict