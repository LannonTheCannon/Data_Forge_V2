# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-17 19:50:06

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # The data_raw is expected to be a DataFrame similar to Dataset_0
    
    # Create a box plot with roast on x-axis and mean on y-axis.
    # Since we only have one mean value per roast (4 rows), to create a meaningful box plot,
    # we simulate distribution by creating synthetic points around the mean using std and count.
    # This is because box plots need multiple points per category.
    
    simulated_data = []
    for _, row in data_raw.iterrows():
        # Simulate data points from a normal distribution with mean and std, count times
        # Clip the values between min and max for realism
        points = np.random.normal(loc=row['mean'], scale=row['std'], size=row['count'])
        points = np.clip(points, row['min'], row['max'])
        for val in points:
            simulated_data.append({'roast': row['roast'], 'mean': val})

    df_sim = pd.DataFrame(simulated_data)

    fig = go.Figure()

    roasts = df_sim['roast'].unique()
    roasts = sorted(roasts)  # Sort to keep consistent order

    for roast in roasts:
        fig.add_trace(go.Box(
            y=df_sim.loc[df_sim['roast'] == roast, 'mean'],
            x=[roast] * df_sim.loc[df_sim['roast'] == roast].shape[0],
            name=roast,
            boxpoints='outliers',
            marker_color='blue'
        ))

    fig.update_layout(
        title="Rating Distribution Across Roast Categories",
        xaxis_title="Roast",
        yaxis_title="Mean Rating",
        boxmode='group'
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict