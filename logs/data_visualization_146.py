# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-27 16:57:09

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio





    # Data is expected to have columns: employee_residence, remote_ratio, count, proportion

    # Sort employee_residence by total count to confirm top 5 (already given as 5 unique)
    top_countries = data_raw['employee_residence'].unique().tolist()

    # Define remote_ratio categories order and colors for consistency
    remote_categories = ["onsite", "partially remote", "fully remote"]
    colors = {
        "onsite": "#636EFA",
        "partially remote": "#EF553B",
        "fully remote": "#00CC96"
    }

    # Prepare figure
    fig = go.Figure()

    # For each remote_ratio category, add a bar trace
    for remote_cat in remote_categories:
        # Filter data for this category
        df_cat = data_raw[data_raw['remote_ratio'] == remote_cat]

        # Ensure the order of countries is consistent
        proportions = []
        for country in top_countries:
            val = df_cat[df_cat['employee_residence'] == country]['proportion']
            if not val.empty:
                proportions.append(val.values[0])
            else:
                proportions.append(0)

        fig.add_trace(go.Bar(
            x=top_countries,
            y=proportions,
            name=remote_cat,
            marker_color=colors[remote_cat],
            hovertemplate=(
                "<b>Employee Residence:</b> %{x}<br>" +
                "<b>Remote Ratio:</b> " + remote_cat + "<br>" +
                "<b>Proportion:</b> %{y:.3f}<extra></extra>"
            )
        ))

    fig.update_layout(
        barmode='stack',
        title="Distribution of Remote Work Categories by Top 5 Employee Residence Countries",
        xaxis_title="Employee Residence Country",
        yaxis_title="Proportion of Employees",
        yaxis=dict(range=[0,1]),
        legend_title="Remote Work Category",
        template="plotly_white"
    )

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict