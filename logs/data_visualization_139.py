# Disclaimer: This function was generated by AI. Please review before using.
# Agent Name: data_visualization_agent
# Time Created: 2025-04-26 18:37:54

def data_visualization(data_raw):
    import pandas as pd
    import numpy as np
    import json
    import plotly.graph_objects as go
    import plotly.io as pio
    from plotly.subplots import make_subplots
    import plotly.express as px





    # Data is assumed clean and no missing values as per instructions.

    # Identify top-selling products by category
    # Top-selling products defined by total sales sum over entire period per category
    top_products = (
        data_raw.groupby(['Category', 'Product'])['Total Sales']
        .sum()
        .reset_index()
        .sort_values(['Category', 'Total Sales'], ascending=[True, False])
    )

    # Select top products for each category (all products since instruction says "each top-selling product")
    # We interpret "top-selling" as all products in dataset since no count limit was specified,
    # but to keep clarity and avoid overcrowding, we pick top 2 products per category.
    top_products_per_category = (
        top_products.groupby('Category').head(2)
    )

    # Filter original data to only include these top products
    filtered_data = data_raw.merge(
        top_products_per_category[['Category', 'Product']],
        on=['Category', 'Product'],
        how='inner'
    )

    # Sort data by Date for line plotting
    filtered_data = filtered_data.sort_values('Date')

    # Create figure with subplots (small multiples) by Category

    categories = filtered_data['Category'].unique()
    n_categories = len(categories)

    # Create subplot with one row per category, shared x-axis to compare trends over time
    fig = make_subplots(
        rows=n_categories,
        cols=1,
        shared_xaxes=True,
        subplot_titles=[f"Category: {cat}" for cat in categories],
        vertical_spacing=0.08
    )

    # Color palette to differentiate products consistently
    # Use Plotly qualitative palette

    color_discrete_map = {}
    all_top_products = filtered_data['Product'].unique()
    color_sequence = px.colors.qualitative.Plotly
    for i, prod in enumerate(sorted(all_top_products)):
        color_discrete_map[prod] = color_sequence[i % len(color_sequence)]

    # Add traces: one trace per product per category
    for i, cat in enumerate(categories, start=1):
        cat_data = filtered_data[filtered_data['Category'] == cat]
        products_in_cat = cat_data['Product'].unique()
        for prod in products_in_cat:
            prod_data = cat_data[cat_data['Product'] == prod]

            # Aggregate sales by date in case of duplicates
            prod_data_agg = prod_data.groupby('Date', as_index=False)['Total Sales'].sum()

            fig.add_trace(
                go.Scatter(
                    x=prod_data_agg['Date'],
                    y=prod_data_agg['Total Sales'],
                    mode='lines+markers',
                    name=prod,
                    line=dict(color=color_discrete_map[prod]),
                    showlegend=(i == 1)  # Show legend only in first subplot for clarity
                ),
                row=i,
                col=1
            )

    # Update layout with titles and axis labels
    fig.update_layout(
        height=300 * n_categories,
        title_text="Sales Performance Trends Over Time for Top-Selling Products by Category",
        legend_title_text="Product",
        legend=dict(
            orientation='h',
            yanchor='bottom',
            y=1.02,
            xanchor='right',
            x=1
        ),
        margin=dict(t=100)
    )

    fig.update_xaxes(title_text="Date")
    fig.update_yaxes(title_text="Total Sales")

    fig_json = pio.to_json(fig)
    fig_dict = json.loads(fig_json)

    return fig_dict